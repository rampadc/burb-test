apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: system-template
  title: Create New System
  description: Create a System from  template
  tags:
    - system
spec:
  owner: group:ibmers-community
  type: system

  parameters:
    - title: Provide System simple information
      required:
        - system
        - owner
      properties:
        system:
          title: Name
          type: string
          description: Unique name of the System
          ui:field: EntityNamePicker
          ui:autofocus: true

        description:
          title: Description
          type: string
          description: Help others understand what this system is for

        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group

        dryRun:
          title: Only perform a dry run, don't publish anything
          type: boolean
          default: false

  steps:
    - id: fetch-template
      name: Fetch System Templates
      action: fetch:template
      if: ${{ parameters.dryRun == false }}
      input:
        url: ./skeleton
        values:
          system: ${{ parameters.system }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}

    - id: open-pr
      name: "Open PR on Backstage Catalog"
      action: publish:github:pull-request
      if: ${{ parameters.dryRun == false }}
      input:
        repoUrl: github.com?repo=burb-test&owner=rampadc
        branchName: create-${{ parameters.system }}
        title: ':robot: [backstage-bot] Create ${{ parameters.system }}'
        description: |
          # New project: ${{ parameters.system }}
          ${{ parameters.description if parameters.description }}
        sourcePath: system
        targetPath: reservations

    # - id: register
    #   name: Register Application in Catalog
    #   action: catalog:register
    #   if: ${{ parameters.dryRun !== true }}
    #   input:
    #     repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
    #     catalogInfoPath: "/catalog-info.yaml"


    - name: Results
      if: ${{ parameters.dryRun }}
      action: debug:log
      input:
        listWorkspace: true

  output:
    links:
      - title: Go to GitOps Pull Request
        url: ${{ steps.open-pr.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}